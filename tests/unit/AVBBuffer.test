%description:

Test AVBBuffer


%includes:

#include "CoRE4INET_SRPTable.h"
#include "CoRE4INET_AVBBuffer.h"
#include "CoRE4INET_AVBDefs.h"


%inifile: test.ini

[General]
check-signals = true
network = Test
cmdenv-express-mode = false
output-vector-file = test.vec
output-scalar-file = test.sca
simtime-scale = -12


%global:

#define PrintModulelist(X)  for (std::list<cModule*>::iterator module = X.begin(); module!=X.end();module++){ev<<(*module)->getName()<< " ";}

%activity:

cSimpleModule port1;
port1.setName("port1");
cSimpleModule port2;
port2.setName("port2");

cModuleType *moduleTypeBuffer = cModuleType::get("core4inet.services.avb.SRP.SRPTable");
CoRE4INET::SRPTable *table = (CoRE4INET::SRPTable*)moduleTypeBuffer->create("srpTable", this);
table->clear();
std::list<cModule*> ports = table->getListenersForStreamId(0);
ev << "Ports:{";
PrintModulelist(ports);
ev << "}" << std::endl;
table->updateTalkerWithStreamId(0, &port1, MACAddress("01:02:03:04:05:06"), CoRE4INET::SR_CLASS_A, 350, 1, 0);
table->printState();
table->updateListenerWithStreamId(0, &port2, 0);
table->printState();
ev << "Bandwidth for "<< port2.getName() <<" is " << table->getBandwidthForModule(&port2) << "Bps" << std::endl;

cModuleType *moduleTypeBuffer = cModuleType::get("core4inet.buffer.avb.AVBBuffer");
CoRE4INET::AVBBuffer *buffer = (CoRE4INET::AVBBuffer*)moduleTypeBuffer->create("avbBuffer", this);