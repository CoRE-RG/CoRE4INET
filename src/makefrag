#Force your desired compiler
#CC = clang
#CXX = clang++

#CFLAGS += -std=c++11
#CFLAGS += -Wall -Wunused
#CFLAGS += -Wall -Werror -Wunused -Wdocumentation
#CFLAGS += -Wall -Werror -Wunused -Weverything -Wno-c++11-long-long -Wno-c++11-extra-semi -Wno-weak-vtables -Wno-shadow -Wno-global-constructors -Wno-exit-time-destructors -Wno-pedantic -Wno-missing-prototypes -Wno-used-but-marked-unused

#replace include of external sources to suppress warnings in omnet and inet
#COPTS := $(subst -I../../inet,-isystem ../../inet,$(COPTS))
#COPTS := $(subst -I$(OMNETPP_INCL_DIR),-isystem $(OMNETPP_INCL_DIR) ,$(COPTS))


UNAME_S := $(shell uname -s)

#Special Flags for OS X
ifeq ($(UNAME_S),Darwin)
    LDFLAGS += -headerpad_max_install_names 
endif

#Warnings in clang and gcc:
ifeq ($(CC),clang)
	#clang
    CFLAGS += -Wall -Wunused -Wextra -Wdocumentation
else ifeq ($(CC),gcc)
	#gcc
    CFLAGS += -Wall -Wunused -Wextra -Weverything
    CFLAGS += -Wno-documentation-unknown-command -Wno-padded
    CFLAGS += -Wno-error=unused-parameter -Wno-error=header-hygiene
endif

#Warnings generate errors
CFLAGS += -Werror



# use -isystem instead of -I flag, to hide warnings in these files
RELPRJDOTS = $(subst o,,$(subst o ,/,$(patsubst %,..o,$(subst /, ,$(PROJECTRELATIVE_PATH)))))
ifneq (,$(findstring MINGW,$(shell uname -s)))
    # on windows we need this hack for pathes like -Id:/...
    override COPTS := $(shell echo '$(subst -I$(RELPRJDOTS)/.,-isystem $(RELPRJDOTS)/.,$(COPTS))' |sed -e 's/-I\($(subst \| ,\|,$(addsuffix \|,$(filter %:,$(subst :,: ,$(patsubst -I%,%,$(COPTS))))) \/)\)/-isystem \1/g')
else
    # on unix we can use this
    override COPTS := $(subst -I/,-isystem /,$(subst -I$(RELPRJDOTS)/.,-isystem $(RELPRJDOTS)/.,$(COPTS)))
endif
$(info Replaced COPTS -I directives with -isystem directive: $(COPTS))
